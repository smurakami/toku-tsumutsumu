// Generated by CoffeeScript 1.6.3
(function() {
  var EndScreen, Floor, GAME_HEIGHT, GAME_WIDTH, MOVE_TOP_THRESHOLD, Score, TOKU_DEFAULT_Y, Title, Toku, awardTitle, awards, game, gameIsOver, gameover, score, scoreForAward, setGamePos, titleImage, toku, tokuImage;

  enchant();

  GAME_WIDTH = 320;

  GAME_HEIGHT = 320;

  game = null;

  toku = null;

  score = null;

  gameIsOver = false;

  Floor = enchant.Class.create(PhyBoxSprite, {
    initialize: function() {
      var surface;
      PhyBoxSprite.call(this, GAME_WIDTH - 20, 40, enchant.box2d.STATIC_SPRITE, 1.0, 1.0, 0.0, true);
      this.x = 10;
      this.y = GAME_HEIGHT - this.height / 2;
      surface = new Surface(this.width, this.height);
      surface.context.beginPath();
      surface.context.strokeRect(0, 0, this.width, this.height);
      this.image = surface;
      return game.rootScene.addChild(this);
    }
  });

  TOKU_DEFAULT_Y = 60;

  tokuImage = "img/toku_min.png";

  MOVE_TOP_THRESHOLD = 100;

  Toku = enchant.Class.create(PhyBoxSprite, {
    initialize: function(x, y) {
      if (x == null) {
        x = GAME_WIDTH / 2;
      }
      if (y == null) {
        y = TOKU_DEFAULT_Y;
      }
      if (gameIsOver) {
        return;
      }
      PhyBoxSprite.call(this, 32, 32, enchant.box2d.DYNAMIC_SPRITE, 1.0, 1.0, 0.4, false);
      this.image = game.assets[tokuImage];
      x -= game.rootScene.x;
      y -= game.rootScene.y;
      this.position = {
        x: x,
        y: y
      };
      this.addEventListener('enterframe', this.update);
      return game.rootScene.addChild(this);
    },
    checkPos: function() {
      var self;
      self = this;
      return setTimeout(function() {
        if (self.y < -game.rootScene.y + MOVE_TOP_THRESHOLD) {
          return setGamePos(0, game.rootScene.y + MOVE_TOP_THRESHOLD);
        }
      }, 500);
    },
    update: function() {
      if (gameIsOver) {
        this.destroy();
        return;
      }
      if (this.y > GAME_HEIGHT + this.height) {
        return gameover();
      }
    },
    destroy: function() {
      this.removeEventListener("enterframe", this.update);
      return game.rootScene.removeChild(this);
    }
  });

  Score = enchant.Class.create(enchant.Label, {
    initialize: function() {
      enchant.Label.call(this, "徳×0");
      this.num = 0;
      this.x = 10;
      this.y = 10;
      this.font = '32px sans-serif';
      this.image = game.assets[tokuImage];
      return game.rootScene.addChild(this);
    },
    gain: function() {
      this.num++;
      return this.text = "徳×" + this.num;
    }
  });

  titleImage = 'img/title.png';

  Title = enchant.Class.create(enchant.Sprite, {
    initialize: function() {
      enchant.Sprite.call(this, GAME_WIDTH, GAME_HEIGHT);
      this.image = game.assets[titleImage];
      this.addEventListener('touchstart', function() {
        game.rootScene.removeChild(this);
        return setTimeout(function() {
          return toku = new Toku();
        }, 200);
      });
      return game.rootScene.addChild(this);
    }
  });

  EndScreen = enchant.Class.create(enchant.Sprite, {
    initialize: function() {
      var endLabel, scoreLabel, self;
      enchant.Sprite.call(this, GAME_WIDTH, GAME_HEIGHT);
      self = this;
      this.backgroundColor = "#fff";
      game.rootScene.addChild(this);
      endLabel = new Label("おしまい");
      endLabel.font = '60px メイリオ';
      endLabel.x = 40;
      endLabel.y = 40;
      game.rootScene.addChild(endLabel);
      scoreLabel = new Label("つんだ徳: ");
      scoreLabel.font = '26px メイリオ';
      scoreLabel.x = 40;
      scoreLabel.y = 160;
      game.rootScene.addChild(scoreLabel);
      setTimeout(function() {
        var label;
        label = new Label("" + score.num);
        label.font = '80px sans-serif';
        label.x = 160;
        label.y = 120;
        return game.rootScene.addChild(label);
      }, 1000);
      setTimeout(function() {
        var award, label;
        award = awardTitle(score.num);
        label = new Label("称号: " + award);
        label.font = '40px sans-serif';
        label.x = 40;
        label.y = 220;
        return game.rootScene.addChild(label);
      }, 2000);
      return setTimeout(function() {
        var award, label;
        award = awardTitle(score.num);
        label = new Label("クリックでもういちど");
        label.font = '20px sans-serif';
        label.x = 40;
        label.y = 280;
        game.rootScene.addChild(label);
        return game.rootScene.addEventListener('touchstart', function() {
          return window.location.reload();
        });
      }, 3000);
    }
  });

  awards = ["プー太郎", "人", "先生", "僧侶", "仙人", "明王", "菩薩", "如来"];

  scoreForAward = [1, 2, 10, 20, 30, 40, 50, 60];

  awardTitle = function() {
    var award, idx, num, _i, _len;
    award = null;
    for (idx = _i = 0, _len = scoreForAward.length; _i < _len; idx = ++_i) {
      num = scoreForAward[idx];
      if (num > score.num) {
        break;
      }
      award = awards[idx];
    }
    return award;
  };

  gameover = function() {
    gameIsOver = true;
    new EndScreen();
  };

  setGamePos = function(x, y) {
    game.rootScene.x = x;
    game.rootScene.y = y;
    score.x = -x + 10;
    return score.y = -y + 10;
  };

  window.onload = function() {
    game = enchant.Core(GAME_WIDTH, GAME_HEIGHT);
    game.fps = 30;
    game.preload(tokuImage);
    game.preload(titleImage);
    game.onload = function() {
      var floor, world;
      world = new PhysicsWorld(0.0, 25);
      floor = new Floor();
      score = new Score();
      new Title();
      game.rootScene.addEventListener('touchstart', function(e) {
        if (toku == null) {
          return;
        }
        return toku.position = {
          x: e.x,
          y: TOKU_DEFAULT_Y
        };
      });
      game.rootScene.addEventListener('touchmove', function(e) {
        if (toku == null) {
          return;
        }
        return toku.position = {
          x: e.x,
          y: TOKU_DEFAULT_Y
        };
      });
      game.rootScene.addEventListener('touchend', function() {
        if (toku == null) {
          return;
        }
        toku.setAwake(true);
        toku = null;
        score.gain();
        return setTimeout(function() {
          return toku = new Toku;
        }, 500);
      });
      return game.rootScene.onenterframe = function(e) {
        return world.step(game.fps);
      };
    };
    return game.start();
  };

}).call(this);
